x-logging: &logging
  logging:
    driver: "fluentd"
    options:
      tag: "{{.ImageName}}.{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
      fluentd-address: "localhost:24224"

x-common-redis: &common-redis
  image: redis:latest
  command: ["redis-server", "/redis/redis.conf"]
  restart: unless-stopped
  <<: *logging
  healthcheck:
    test: ["CMD", "redis-cli", "ping"]
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - pastebin-net

x-common-minio: &common-minio
  image: minio/minio:latest
  restart: unless-stopped
  <<: *logging
  environment:
    MINIO_ROOT_USER: ${MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  command:
    ["server", "http://minio1/data", "http://minio2/data", "http://minio3/data", "http://minio4/data", "--console-address", ":9001"]
  healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  networks:
    - pastebin-net

x-common-elasticsearch: &common-elasticsearch
  image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
  restart: unless-stopped
  environment:
    - "bootstrap.memory_lock=true"
    - "cluster.name=es-cluster"
    - "discovery.seed_hosts=elasticsearch2,elasticsearch3"
    - cluster.initial_master_nodes=elasticsearch1,elasticsearch2,elasticsearch3
    - ES_JAVA_OPTS=-Xms512m -Xmx512m
    - xpack.security.enabled=false
    - ingest.geoip.downloader.enabled=false
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
    interval: 30s
    timeout: 10s
    retries: 30
  ulimits:
    memlock:
      soft: -1
      hard: -1
  networks:
    - pastebin-net

x-common-kafka: &common-kafka
  image: apache/kafka-native
  restart: unless-stopped
  ports:
    - "9092:9092"
  environment:
    KAFKA_PROCESS_ROLES: broker,controller
    KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
    KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  healthcheck:
    test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
    interval: 30s
    timeout: 10s
    retries: 5
  networks:
    - pastebin-net


services:
  auth:
    container_name: auth
    build:
      context: ./authService
      dockerfile: Dockerfile
    <<: *logging
    ports:
      - "10001:10001"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./authService/config.yml:/app/config.yml
    networks:
      - pastebin-net

  pastas:
    build:
      context: ./pastaService
      dockerfile: Dockerfile
    container_name: pastas
    <<: *logging
    ports:
      - "10002:10002"
    depends_on:
      db:
        condition: service_healthy
      elasticsearch1:
        condition: service_healthy
      elasticsearch2:
        condition: service_healthy
      elasticsearch3:
        condition: service_healthy
      redis1:
        condition: service_healthy
      redis2:
        condition: service_healthy
      redis3:
        condition: service_healthy
      redis4:
        condition: service_healthy
      redis5:
        condition: service_healthy
      redis6:
        condition: service_healthy
      redis-cluster-init:
        condition: service_started
      minio1:
        condition: service_healthy
      minio2:
        condition: service_healthy
      minio3:
        condition: service_healthy
      minio4:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./pastaService/config.yml:/app/config.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pastebin-net

  minio2:
    <<: *common-minio
    container_name: minio2
    ports:
      - "9002:9000"
      - "9102:9001"
    volumes:
      - minio2_data:/data

  minio3:
    <<: *common-minio
    container_name: minio3
    ports:
      - "9003:9000"
      - "9103:9001"
    volumes:
      - minio3_data:/data

  minio4:
    <<: *common-minio
    container_name: minio4
    ports:
      - "9004:9000"
      - "9104:9001"
    volumes:
      - minio4_data:/data

  db:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Europe/Moscow
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pastebin-net

  redis1:
    <<: *common-redis
    container_name: redis1
    volumes:
      - ./setup/redis/7000/redis.conf:/redis/redis.conf
    ports:
      - "7000"

  redis2:
    <<: *common-redis
    container_name: redis2
    volumes:
      - ./setup/redis/7001/redis.conf:/redis/redis.conf
    ports:
      - "7001"

  redis3:
    <<: *common-redis
    container_name: redis3
    volumes:
      - ./setup/redis/7002/redis.conf:/redis/redis.conf
    ports:
      - "7002"

  redis4:
    <<: *common-redis
    container_name: redis4
    volumes:
      - ./setup/redis/7003/redis.conf:/redis/redis.conf
    ports:
      - "7003"

  redis5:
    <<: *common-redis
    container_name: redis5
    volumes:
      - ./setup/redis/7004/redis.conf:/redis/redis.conf
    ports:
      - "7004"

  redis6:
    <<: *common-redis
    container_name: redis6
    volumes:
      - ./setup/redis/7005/redis.conf:/redis/redis.conf
    ports:
      - "7005"

  redis-cluster-init:
    build:
      context: ./setup/redis/
      dockerfile: Dockerfile
    tty: true
    depends_on:
      redis1:
        condition: service_healthy
      redis2:
        condition: service_healthy
      redis3:
        condition: service_healthy
      redis4:
        condition: service_healthy
      redis5:
        condition: service_healthy
      redis6:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis1", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pastebin-net
    
  elasticsearch1:
    <<: *common-elasticsearch
    container_name: elasticsearch1
    ports:
      - "9200:9200"
    environment:
      - "node.name=elasticsearch1"
    volumes:
      - es-data1:/usr/share/elasticsearch/data

  elasticsearch2:
    <<: *common-elasticsearch
    container_name: elasticsearch2
    ports:
      - "9201:9200"
    environment:
      - "node.name=elasticsearch2"
    volumes:
      - es-data2:/usr/share/elasticsearch/data

  elasticsearch3:
    <<: *common-elasticsearch
    container_name: elasticsearch3
    ports:
      - "9202:9200"
    environment:
      - "node.name=elasticsearch3"
    volumes:
      - es-data3:/usr/share/elasticsearch/data


  kafka1:
    <<: *common-kafka
    container_name: kafka1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: HOST://kafka1:9092,DOCKER://kafka1:9093

  kafka2:
    <<: *common-kafka
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_ADVERTISED_LISTENERS: HOST://kafka2:9092,DOCKER://kafka2:9093

  kafka3:
    <<: *common-kafka
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_ADVERTISED_LISTENERS: HOST://kafka3:9092,DOCKER://kafka3:9093


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    ports:
      - "8000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_ID: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092, kafka2:9092, kafka3:9092
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
    networks:
      - pastebin-net

  fluentd:
    build:
      context: ./setup/fluentd/
    container_name: fluentd
    restart: always
    volumes:
      - ./setup/fluentd/fluentd.conf:/fluentd/etc/fluent.conf
    ports:
      - "127.0.0.1:24224:24224"
      - "127.0.0.1:24224:24224/udp"
      - "127.0.0.1:9292:9292"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9292/api/plugins.json"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
    - pastebin-net

  opensearch:
    image: opensearchproject/opensearch:latest
    container_name: opensearch
    restart: unless-stopped
    environment:
      - node.name=opensearch-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - cluster.name=opensearch-cluster
      - network.host=0.0.0.0
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - plugins.security.disabled=true
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=MyS3cretPassw0rd!321dfaskdasldwqo
    ulimits:
      memlock:
        soft: -1 
        hard: -1
      nofile:
        soft: 65536 
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - pastebin-net

  opensearch-dashboards:
    build:
      context: ./setup/opensearch-dashboards/
    container_name: opensearch-dashboards
    restart: unless-stopped
    ports:
      - "5601:5601"
    depends_on:
      opensearch:
        condition: service_healthy
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/5601"
      start_period: 5s
      interval: 5s
      retries: 30
    networks:
    - pastebin-net


volumes:
  pgdata:
  minio1_data:
  minio2_data:
  minio3_data:
  minio4_data:
  es-data1:
  es-data2:
  es-data3:
  opensearch-data:

networks: 
  pastebin-net: 
    driver: bridge
